import "./JetBrainsMono.ttf";
import "./JetBrainsMono-Light.ttf";
import "./Aptos.ttf";
import { Button, VerticalBox, Switch, GridBox, Slider, AboutSlint, HorizontalBox, ComboBox } from "std-widgets.slint";


export component AppWindow inherits Window {

    in-out property <string> result: "Generates a password";
    in property <bool> symbol: false;
    out property <int> length: 6;
    out property <int> last_length;
    in-out property <string> copy_state: "Copy Password";
    in-out property <bool> word_state: true;
    in property <bool> symbol_state : true;
    in-out property <float> text_opacity : 0.4;

    callback mode_select(bool);
    callback edited_text(string);
    callback symtoggled <=> symbols.toggled;
    callback numtoggled <=> numbers.toggled;
    callback captoggled <=> capitals.toggled;
    callback wortoggled <=> words.toggled;
    callback len_mod(int);
    callback copy_clicked <=> copy.clicked;

    title: "Password Generator";
    min-height: 630px;
    min-width: 490px;
    Main := Rectangle {
        x: 0px;
        y: 0px;
        width: parent.width;
        height: parent.height;
        VerticalLayout {
            alignment: center;
            Rectangle {
                
                width: Main.width;
                height: Main.height * (word_state ? 40% : 54%);
                text_area := TextInput {
                    opacity: 0;
                    enabled: !word_state;
                    //height: parent.width;
                    //width: parent.width;
                    edited => {
                        self.set-selection-offsets(30, 100);
                        edited_text(self.text);
                    }
                }
                Main_text := Text {
                        x : (root.width - self.width)/2;
                        y : (parent.height - self.height)/2;
                        width: parent.width;
                        vertical-alignment: center;
                        horizontal-alignment: center;
                        font-family: "JetBrains Mono";
                        text : result;
                        opacity : text_opacity;
                        font-size: 32px;
                        wrap: word-wrap;
                        animate x, opacity {
                            easing : ease-out-back;
                            duration: 500ms;
                        }
                        animate y {
                            duration: 250ms;
                            easing : ease-out-back;
                        }
                    }
                    animate height {
                        duration : 250ms;
                        easing: ease-out-back;
                    }
            }
            HorizontalLayout {
                alignment: center;
            mode := ComboBox {
                accessible-role: AccessibleRole.list;
                model: ["Random", "Passphrase"];
                width: 175px;
                selected => {
                    if word_state == true && self.current-index == 1 {
                        word_state = false; root.height = root.height - 40px; text_area.enabled = true;
                        mode_select(false);
                        text_opacity = 40%
                    } else if word_state == false && self.current-index == 0 {
                        word_state = true; root.height = root.height + 40px; text-area.enabled = false;
                        mode_select(true);
                        text_opacity = 100%;
                    }

                }
            }
        }
            Rectangle {
                height : word_state?50px:10px;
                visible: word_state;
                VerticalLayout {
                    alignment: center;
                    width: Main.width * 70 / 100;
                    height: 50px;
                    HorizontalLayout {
                        alignment: center;
                    }

                    slide := Slider {
                        height: parent.height;
                        enabled: true;
                        minimum: 6;
                        maximum: 30;
                        visible: word_state;
                        width: Main.width * 70%;
                        changed(oreo) => {
                            if last_length != floor(oreo) {
                                length = floor(oreo);
                                last_length = length;
                                len_mod(length);
                            }
                        }
                    }
                }
                animate height {
                     duration: 250ms;
                     easing : ease-out-back;
                }

                //x : Main.width * 20%;
                }

            Rectangle {
                width: Main.width;
                height: 20px;
                Text {
                    font-size: 15px;
                    opacity: 65%;
                    text: "Password Length : " + length;
                    font-family: "Aptos";
                }
            }

            HorizontalLayout {
                alignment: center;
                width: Main.width;
                VerticalLayout {
                    alignment: center;
                    symbols := Switch {
                        accessible-role: AccessibleRole.none;
                        width: 150px;
                        text: "Symbols";
                        enabled : symbol_state;
                        //x: slide.width / 80 * 30;
                }
                }

                VerticalLayout {
                    alignment: center;
                    numbers := Switch {
                        width: 140px;
                        height: 50px;
                        text: "Numbers";
                        //x: slide.width / 80 * 30;
            }
                }
                
            }

            HorizontalLayout {
                alignment: center;
                Rectangle {
                    width: 102px;
                    height: 50px;
                capitals := Switch {
                    text: "Capitals";
                    //x: slide.width / 80 * 30;
                    animate y {
                         duration: 250ms;
                         easing: ease-out-back;
                    }
            }
        }
                Rectangle {
                    width: 186px;
                    height: 50px;
                    words := Switch {
                        text: "Words";
                        visible: word_state;
                        
                    //x: slide.width / 80 * 30;
                    }
                    HorizontalLayout {
                        alignment: end;
                        padding-top: 5px;
                    deli := ComboBox {

                        visible: !word_state;
                        height : 35px;
                        width : 150px;
                        model : ["Periods", "Hyphens","Delimeters"];
                        
                    }
                }
                }
            }

            Rectangle {
                width: Main.width;
                height: 75px;
                VerticalLayout {
                    alignment: center;
                    HorizontalLayout {
                        alignment: center;
                        copy := Button {
                            width: Main.width * 80%;
                            height: Main.height * 7%;
                            text: copy_state;
                            clicked => {
                                self.text = copy_state;
                            }
                        }
                    }
                }
            }
        }
    }
}
